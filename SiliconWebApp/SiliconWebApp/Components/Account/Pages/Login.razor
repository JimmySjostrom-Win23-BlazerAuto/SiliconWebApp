@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SiliconWebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Sign In</PageTitle>

<section id="signin">
	<div class="container">

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alerter">
                <div class="alert alert-danger">
                   @ErrorMessage
                </div>
            </div>
        }

    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" OnValidSubmit="LoginUser" FormName="login" method="post" novalidate>
        <DataAnnotationsValidator />

    <h1>Welcome back!</h1>
	<p>Don't have an account yet? <a href="/signup">Sign up here></a></p>

	    <div class="content">
        	<div id="form-email" class="input-group">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
    		<div id="form-password" class="input-group">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
	    	</div>
    		<div id="form-remember" class="checkbox">
	    	    <div class="checkbox-group">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                     <label>Remember me</label>
	    		</div>
	    	</div>
                <div id="form-submit">
                    <button class="btn-theme-s" type="submit">Sign In</button>
                </div>

		<a id="form-forgot-password" asp-controller="Account" asp-action="Forgot">Forgot your password?</a>
	    </div>

		<div class="external-providers">
		    <h6>Or Sign in with your social account</h6>
			    <div class="providers">
				    <div class="btn-group">
						<a class="btn-gray" asp-action="Google" asp-controller="Auth"><i class="fa-brands fa-google"></i> Google</a>
						<a class="btn-gray" asp-action="Facebook" asp-controller="Auth"><i class="fa-brands fa-facebook"></i> Facebook</a>
					</div>
				</div>
			</div>
		</EditForm>
	</div>
</section>

@code {
    private string? ErrorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
          //   RedirectManager.RedirectTo(ReturnUrl);
            RedirectManager.RedirectTo("Account/Deets");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            ErrorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}