@page "/Account/Manage/Notifications"

@using System.Security.Claims
@using Newtonsoft.Json
@using SiliconWebApp.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient

@rendermode InteractiveServer

<div class="notifications">
    <div class="title">
        <h1>Notifications</h1>
    </div>

    <EditForm FormName="subscribe" Model="SubscribeForm" OnValidSubmit="SaveChanges" method="post" novalidate>
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="alternative">
            <h4>Preferred email for notifications</h4>
        </div>

        <div class="form-email">
            <div class="input-group">
                <i class="fa-regular fa-envelope"></i>
                <InputText type="email" @bind-Value="SubscribeForm.Email" placeholder="Enter your email" />
            </div>
            <ValidationMessage For="@(() => SubscribeForm.Email)" class="text-danger" />
        </div>

        <!-- First slider -->
        <div id="theme-switch" class="btn-switch">
            <label class="switch" for="subscribe-switch-mode">
                <input type="checkbox" id="subscribe-switch-mode" @bind="IsSubscribed" />
                <span class="slider round"></span>
            </label>
            <h6>Notifications</h6>
            <p>The slider are currently not operational. To turn notifications on or off you need to use the appropriate button below.</p>
        </div>

        <!-- Second slider -->
        <div id="theme-switch-2" class="btn-switch">
            <label class="switch" for="dark-mode-switch-mode">
                <input type="checkbox" id="dark-mode-switch-mode" />
                <span class="slider round"></span>
            </label>
            <h6>Use Dark Mode Theme in Application</h6>
            <p>Dark mode currently not available.</p>
        </div>
        
        <div class="form-buttons">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <p>@StatusMessage</p>
            }
        </div>
    </EditForm>

    <div class="form-buttons">
        <button class="btn-theme" @onclick="Subscribe">Notifications On</button>
        <button class="btn-gray" @onclick="Unsubscribe">Notifications Off</button>
    </div>   
    <p>The checks are currently not working. Turn off when already off will give an error.</p>
</div>

@code {
    private bool IsSubscribed { get; set; } = false;
   
    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = "";

    public SubscribeFormModel SubscribeForm { get; set; } = new SubscribeFormModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userEmail = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;
            if (!string.IsNullOrEmpty(userEmail))
            {
                SubscribeForm.Email = userEmail;
                              
                var response = await HttpClient.GetAsync($"https://newsletterprovider-js.azurewebsites.net/api/CheckSubscription?email={userEmail}");
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var isSubscribed = JsonConvert.DeserializeObject<bool>(content);
                    IsSubscribed = isSubscribed;
                }

                if (IsSubscribed)
                {
                    SubscribeForm.DailyNewsletter = true;
                    SubscribeForm.AdvertisingUpdates = true;
                    SubscribeForm.WeekinReview = true;
                    SubscribeForm.EventUpdates = true;
                    SubscribeForm.StartupsWeekly = true;
                    SubscribeForm.Podcasts = true;
                }
            }
        }
    }

    private async Task SaveChanges()
    {
        try
        {
            var result = await HttpClient.PostAsJsonAsync("https://newsletterprovider-js.azurewebsites.net/api/Subscribe?code=9PlRG-_rKbT5q3ftft4HFZ3IGd-uFaCPUS4bn3zU1_G4AzFue4amTQ%3D%3D", SubscribeForm);
            if (result.IsSuccessStatusCode)
            {
                StatusMessage = "Changes saved!";
            }
        }
        catch
        {
            SubscribeForm = new SubscribeFormModel();
            StatusMessage = "Unable to save changes. Please try again later.";
        }
    }

    private async Task Subscribe()
    {
        try
        {
            var model = new SubscribeFormModel
                {
                    Email = SubscribeForm.Email,
                    DailyNewsletter = true,
                    AdvertisingUpdates = true,
                    WeekinReview = true,
                    EventUpdates = true,
                    StartupsWeekly = true,
                    Podcasts = true
                };

            var content = new StringContent(JsonConvert.SerializeObject(model), Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync($"https://siliconwebapi-js.azurewebsites.net/api/Subscribe", content);

            if (response.IsSuccessStatusCode)
            {
                StatusMessage = "Subscribed successfully!";
            }
            else
            {
                StatusMessage = "Unable to subscribe. Please try again later.";
            }
        }
        catch
        {
            StatusMessage = "Unable to subscribe. Please try again later.";
        }
    }

    private async Task Unsubscribe()
    {
        try
        {
            var email = SubscribeForm.Email;

            var response = await HttpClient.DeleteAsync($"https://siliconwebapi-js.azurewebsites.net/api/Subscribe?email={email}");

            if (response.IsSuccessStatusCode)
            {
                StatusMessage = "Unsubscribed successfully!";
            }
            else
            {
                StatusMessage = "Unable to unsubscribe. Please try again later.";
            }
        }
        catch
        {
            StatusMessage = "Unable to unsubscribe. Please try again later.";
        }
    }

    public class SubscribeFormModel
    {
        [EmailAddress]
        [Required(ErrorMessage = "You must provide an email address")]
        [Display(Name = "Email address", Prompt = "Your Email")]
        public string Email { get; set; } = null!;
        public bool DailyNewsletter { get; set; }
        public bool AdvertisingUpdates { get; set; }
        public bool WeekinReview { get; set; }
        public bool EventUpdates { get; set; }
        public bool StartupsWeekly { get; set; }
        public bool Podcasts { get; set; }
    }
}