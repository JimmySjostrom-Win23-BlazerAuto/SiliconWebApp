@page "/Account/Signup"
@using Azure.Messaging.ServiceBus
@using Newtonsoft.Json
@rendermode InteractiveServer

<SiliconWebApp.Components.Pages.Shared.Header />

<PageTitle>Silicon - SignUp</PageTitle>

<section id="signup">
    <div class="container">

        @if (!string.IsNullOrEmpty(@StatusMessage))
        {
            <div class="alerter">
                @StatusMessage
            </div>
        }               

        <EditForm Model="SignUpForm" OnValidSubmit="OnValidSubmit" FormName="signup" method="post" novalidate>
            <DataAnnotationsValidator />
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/signin">Sign in here></a></p>

            <div class="content">

                <div id="form-firstname" class="input-group">
                    <label>First name</label>
                    <InputText @bind-Value="SignUpForm.FirstName" />
                    <ValidationMessage For="() => SignUpForm.FirstName" />
                </div>

                <div id="form-lastname" class="input-group">
                    <label>Last name</label>
                    <InputText @bind-Value="SignUpForm.LastName" />
                    <ValidationMessage For="() => SignUpForm.LastName" />
                </div>

                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                    <ValidationMessage For="() => SignUpForm.Email" />
                </div>

                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" />
                </div>

                <div id="form-confirm" class="input-group">
                    <label>Confirm Password</label>
                    <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password" />
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" />
                </div>

                <div id="form-terms" class="checkbox">
                    <div class="checkbox-group">
                        <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" />
                        <label>I agree to the Terms & Condítions.</label>
                    </div>
                    <ValidationMessage For="() => SignUpForm.TermsAndConditions" />
                </div>

                <div id="form-button">
                    <button class="btn-theme-s" type="submit">Sign Up</button>
                </div>
            </div>
        </EditForm>
    </div>
</section>

<SiliconWebApp.Components.Pages.Shared.Footer />

@code {
    [SupplyParameterFromQuery]
    public string? StatusMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    public SignUpFormModel SignUpForm { get; set; } = new();

    public async Task OnValidSubmit(EditContext editContext)
    {
        var user = new ApplicationUser
        {
           UserProfile = new UserProfile
           {
               FirstName = SignUpForm.FirstName,
               LastName = SignUpForm.LastName
           },
           UserName = SignUpForm.Email,
           Email = SignUpForm.Email
        };

        try
        {
            var alreadyExists = await UserManager.FindByEmailAsync(SignUpForm.Email);
            if (alreadyExists != null)
            {
                StatusMessage = "An account with this e-mail already exists.";
            }

            var result = await UserManager.CreateAsync(user, SignUpForm.Password);
            if (!result.Succeeded)
            {
                StatusMessage = "Unable to register account. Please try again"; 
                return;
            }
        }
        catch (Exception ex)
        {
            StatusMessage = "An error occured!";
            return;
        }

        // Service Bus instead of Http
        var connectionString = "Endpoint=sb://servicebus-silicon-js.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=DA+WNDgq351cLXx4s9ehET1n1pccMXkiN+ASbLgVqg8=";
        var queueName = "https://servicebus-silicon-js.servicebus.windows.net/verification_request";

        var serviceBusClient = new ServiceBusClient(connectionString);
        var serviceBusSender = serviceBusClient.CreateSender(queueName);

        var messageBody = JsonConvert.SerializeObject(SignUpForm);
        var serviceBusMessage = new ServiceBusMessage(messageBody);

        await serviceBusSender.SendMessageAsync(serviceBusMessage);

       //  await Http.PostAsJsonAsync("https://verificationprovider-silicon-js.azurewebsites.net/api/GenerateVerificationCodeHttp?code=nVnHtMxxee5moXrH0abGRA3vrIOjUKNI-6mBnhzcuFtLAzFuSG3ohg%3D%3D", SignUpForm);
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = ReturnUrl});
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    public class SignUpFormModel
    {
        [Display(Name = "First name", Prompt = "Enter your first name", Order = 0)]
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = null!;

        [Display(Name = "Last name", Prompt = "Enter your last name", Order = 1)]
        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = null!;

        [Display(Name = "Email", Prompt = "Enter your email address", Order = 2)]
        [Required(ErrorMessage = "Email address is required")]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [Display(Name = "Password", Prompt = "Enter your password", Order = 3)]
        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Invalid password. must be a strong password")]
        public string Password { get; set; } = null!;

        [Display(Name = "Confirm Password", Prompt = "Confirm password", Order = 4)]
        [Required(ErrorMessage = "Password must be confirmed")]
        [DataType(DataType.Password)]
        [Compare(nameof(Password), ErrorMessage = "Password does not match")]
        public string ConfirmPassword { get; set; } = null!;

        [Display(Name = "I agree to the Terms & Condítions.", Prompt = "Terms and Conditions", Order = 5)]
        public bool TermsAndConditions { get; set; } 
    }
}