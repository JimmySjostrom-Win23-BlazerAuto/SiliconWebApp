@rendermode InteractiveServer

<section id="subscribe">
	<div class="container">
		<div class="title">
			<h2>Dont't Want to Miss Anything'</h2>
			<img src="/images/arrows.svg" alt="swirl arrow" />
		</div>
		<EditForm FormName="subscribe" Model="SubscribeForm" OnValidSubmit="OnValidSubmit" method="post" novalidate>
			<DataAnnotationsValidator />
			<div class="alternative">
				<h4>Sign up for newsletters</h4>
				<div class="options">
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.DailyNewsletter" />
							<label>Daily Newsletter</label>
						</div>
					</div>
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.AdvertisingUpdates" />
							<label>Advertising Updates</label>
						</div>
					</div>
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.WeekinReview" />
							<label>Week in Review</label>
						</div>
					</div>
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.EventUpdates" />
							<label>Event Updates</label>
						</div>
					</div>
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.StartupsWeekly" />
							<label>Startups Weekly</label>
						</div>
					</div>
					<div class="checkbox-group">
						<div class="input-group">
							<InputCheckbox @bind-Value="SubscribeForm.Podcasts" />
							<label>Podcasts</label>
						</div>
					</div>

				</div>
			</div>

			<div class="form-email">
				<div class="input-group">
					<i class="fa-regular fa-envelope"></i>
					<InputText type="email" @bind-Value="SubscribeForm.Email" placerholder="Enter your email"/>
				</div>
				<button type="submit" class="btn btn-theme">Subscribe *</button>
			</div>
			<ValidationMessage For="@(() => SubscribeForm.Email)" class="text-danger" />
			<span class="status-message"></span>
		</EditForm>
	</div>
</section>

@code {
	[SupplyParameterFromQuery]
	public string StatusMessage { get; set; } = "* Yes, I agree to the terms and privacy policy.";

	[SupplyParameterFromForm]
	public SubscribeFormModel SubscribeForm { get; set; } = new SubscribeFormModel();

	private async Task OnValidSubmit()
	{
		try
		{
			var result = await Http.PostAsJsonAsync("https://newsletterprovider-js.azurewebsites.net/api/Subscribe?code=9PlRG-_rKbT5q3ftft4HFZ3IGd-uFaCPUS4bn3zU1_G4AzFue4amTQ%3D%3D", SubscribeForm);
			if (result.IsSuccessStatusCode)
				StatusMessage = "Thank you for subscribing!"; // Change to return code from the api.
		}
		catch 
		{
			SubscribeForm = new SubscribeFormModel();
			StatusMessage = "Unable to subscribe right now. Please try again later.";
		}

		SubscribeForm = new SubscribeFormModel();
		await ResetStatusMessage(); // Does not work yet. Figure out why.
	}

	private async Task ResetStatusMessage()
	{
		await Task.Delay(2000);
		StatusMessage = string.Empty;
		StateHasChanged();
	}

	public class SubscribeFormModel
	{		
		[EmailAddress]
		[Required(ErrorMessage = "You must provide an email address")]
		[Display(Name = "Email address", Prompt = "Your Email")]
		public string Email { get; set; } = null!;
		public bool DailyNewsletter { get; set; }
		public bool AdvertisingUpdates { get; set; }
		public bool WeekinReview { get; set; }
		public bool EventUpdates { get; set; }
		public bool StartupsWeekly { get; set; }
		public bool Podcasts { get; set; }
	}
}