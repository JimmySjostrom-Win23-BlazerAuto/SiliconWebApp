@page "/courses"
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using SiliconWebApp.Models

@attribute [Authorize]
@attribute [StreamRendering]

<PageTitle>Courses</PageTitle>

<section class="courses">
	<div class="container">
		<div class="header">
			<h1>Courses</h1>

			<form id="form-filters">
				<select>
					<option>All categories</option>
				</select>
				<div class="input-search-group">
					<input id="searchQuery" name="searchQuery" placeholder="Search courses" />
					<i class="fa-regular fa-search"></i>
				</div>
			</form>
		</div>

		<div class="course-items">
			@if (courses == null)
			{
				<div><i class="fa-sharp fa-solid fa-spinner-third fa-spin"></i></div>
			}
			else
			{
				@foreach (var course in courses)
				{
					var link = $"courses/details/{course.Id}";
					<a class="course" href="@link" asp-route-id="course.Id">
						@if (course.IsBestseller)
						{
							<div class="bestseller">Best Seller</div>
						}
						<span class="btn btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></span>
					@* 	<img src="@course.ImageUri" alt="@course.Title" /> *@
					<img src="/images/course_1.svg" />

						<div class="content">
							<h5 class="title">@course.Title</h5>
							<p class="author">By @course.Author</p>
							<div class="pricing">
								@if (!string.IsNullOrEmpty(course.DiscountPrice))
								{
									<div class="discount">@course.DiscountPrice</div>
								}
								<div class="price @(!string.IsNullOrEmpty(course.DiscountPrice)? "discount-enabled" : "")">@course.Price</div>
							</div>
							<div class="footer">
								<div class="hours">
									<i class="fa-regular fa-thumbs-up"></i> @course.LikesInProcent (@course.LikesInNumbers)
								</div>
							</div>
						</div>
					</a>
				}
			}
		</div>
	</div>
</section>

@code {
	private List<CourseCardModel>? courses;

	protected override async Task OnInitializedAsync()
	{
		var query = new GraphQLQuery { Query = "{getCourses { id isBestseller title authors { name } prices { price currency discount } hours likesInProcent likes imageUri }}" };
		var response = await Http.PostAsJsonAsync("https://courseprovider-js.azurewebsites.net/api/graphql?code=EgqwsylmzpLETaxlEGIn2eejQhTsqWNK6pPLpkIML-UfAzFu4AXpBQ%3D%3D", query);

		if (response.IsSuccessStatusCode)
		{
			var jsonResponse = await response.Content.ReadAsStringAsync();
			Console.WriteLine(jsonResponse); 

			try
			{
				var result = JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);
				if (result != null && result.Data.TryGetProperty("getCourses", out var coursesJson))
				{
					courses = coursesJson.EnumerateArray()
						.Select(course => new CourseCardModel
							{
								Id = course.TryGetProperty("id", out var id) ? id.GetString() : string.Empty,
								IsBestseller = course.TryGetProperty("isBestseller", out var isBestseller) ? isBestseller.GetBoolean() : false,
								ImageUri = course.TryGetProperty("imageUri", out var imageUri) ? imageUri.GetString() : string.Empty,
								Title = course.TryGetProperty("title", out var title) ? title.GetString() : string.Empty,
								Author = course.TryGetProperty("authors", out var authors) && authors[0].TryGetProperty("name", out var author) ? author.GetString() : string.Empty,
								Price = course.TryGetProperty("prices", out var pricesJson) ? $"{pricesJson.GetProperty("currency").GetString()} {pricesJson.GetProperty("price").GetDouble()}" : string.Empty,
								DiscountPrice = course.TryGetProperty("prices", out var discountJson) && discountJson.GetProperty("discount").GetDouble() > 0
									? $"{discountJson.GetProperty("currency").GetString()} {discountJson.GetProperty("price").GetDouble() - discountJson.GetProperty("discount").GetDouble()}"
									: null,
								Hours = course.TryGetProperty("hours", out var hours) ? hours.GetString() : string.Empty,
								LikesInProcent = course.TryGetProperty("likesInProcent", out var likesInProcent) ? likesInProcent.GetString() : string.Empty,
								LikesInNumbers = course.TryGetProperty("likes", out var likes) ? likes.GetString() : string.Empty
							})
					.ToList();
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error JSON response: {ex.Message}");
			}
		}
	}
}