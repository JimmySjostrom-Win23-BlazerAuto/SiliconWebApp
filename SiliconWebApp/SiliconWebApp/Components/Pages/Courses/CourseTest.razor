@page "/courses/{CourseId}"

@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using SiliconWebApp.Models
@using Microsoft.AspNetCore.Components
@using SiliconWebApp.Entities
@using SiliconWebApp.Services
@using System.Security.Claims

@rendermode InteractiveServer

@attribute [Authorize]
@attribute [StreamRendering]

@inject OrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<SiliconWebApp.Components.Pages.Shared.Header />

<PageTitle>Course Details</PageTitle>

<section class="coursedeets">
    <div class="course-header">
        @if (course != null)
        {
            <img src="/images/course_1big.svg" alt="@course.Title" class="background-image" />
            <div class="coursetext">
                <h1>@course.Title</h1>
                <p>Ingress Text</p>
                <div class="ratings">
                    <span>Star Ratings</span>
                    <span>@course.LikesInProcent</span>
                    <span>@course.LikesInNumbers</span>
                </div>
                <p class="author">By @course.Author</p>
            </div>
        }
        else
        {
            <p>Loading course details...</p>
        }
    </div>




    <div class="container">
        <div class="grid-container-course">
            <section class="course-description">
                <h2>Course Description</h2>
                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>

                <h2>What You Will Learn</h2>
                <ul>
                    <li>Learning point 1</li>
                    <li>Learning point 2</li>
                    <li>Learning point 3</li>
                    <li>Learning point 4</li>
                    <li>Learning point 5</li>
                </ul>
            </section>

            <section class="aside">
                <h2>This Course Includes</h2>
                <ul>
                    <li>Feature 1</li>
                    <li>Feature 2</li>
                    <li>Feature 3</li>
                    <li>Feature 4</li>
                    <li>Feature 5</li>
                    <li>Feature 6</li>
                </ul>
                <div class="price">
                    <span>Price: @(course != null ? course.Price : "Loading...")</span>
                    <button @onclick="OrderCourse">Join Course</button>
                    @if (OrderPlaced)
                    {
                        <p>Order placed</p>
                    }
                </div>
            </section>

            <section class="program">
                <h2>Program Details</h2>
                <div class="program-item">
                    <div class="program-number">1</div>
                    <div class="program-text">
                        <h3>Title 1</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
                <div class="program-item">
                    <div class="program-number">2</div>
                    <div class="program-text">
                        <h3>Title 2</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
                <div class="program-item">
                    <div class="program-number">3</div>
                    <div class="program-text">
                        <h3>Title 3</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
                <div class="program-item">
                    <div class="program-number">4</div>
                    <div class="program-text">
                        <h3>Title 4</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
                <div class="program-item">
                    <div class="program-number">5</div>
                    <div class="program-text">
                        <h3>Title 5</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
                <div class="program-item">
                    <div class="program-number">6</div>
                    <div class="program-text">
                        <h3>Title 6</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit...</p>
                    </div>
                </div>
            </section>
        </div>
    </div>
</section>

<SiliconWebApp.Components.Pages.Shared.Footer />

@code {
    private CourseCardModel course;

    [Parameter]
    public string? CourseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Guid.TryParse(CourseId, out var courseId))
        {
            var query = new GraphQLQuery
                {
                    Query = $@"
                {{
                    getCourseById(id: ""{courseId}"") {{
                        id
                        isBestseller
                        title
                        authors {{
                            name
                        }}
                        prices {{
                            price
                            currency
                            discount
                        }}
                        hours
                        likesInProcent
                        likes
                        imageUri
                    }}
                }}"
                };

            var response = await Http.PostAsJsonAsync("https://courseprovider-js.azurewebsites.net/api/graphql?code=EgqwsylmzpLETaxlEGIn2eejQhTsqWNK6pPLpkIML-UfAzFu4AXpBQ%3D%3D", query);

            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadAsStringAsync();
                Console.WriteLine(jsonResponse);

                try
                {
                    var result = JsonSerializer.Deserialize<DynamicGraphQLResponse>(jsonResponse);
                    if (result != null && result.Data.TryGetProperty("getCourseById", out var courseJson))
                    {
                        course = new CourseCardModel
                            {
                                Id = courseJson.TryGetProperty("id", out var id) ? id.GetString() : string.Empty,
                                IsBestseller = courseJson.TryGetProperty("isBestseller", out var isBestseller) ? isBestseller.GetBoolean() : false,
                                ImageUri = courseJson.TryGetProperty("imageUri", out var imageUri) ? imageUri.GetString() : string.Empty,
                                Title = courseJson.TryGetProperty("title", out var title) ? title.GetString() : string.Empty,
                                Author = courseJson.TryGetProperty("authors", out var authors) && authors[0].TryGetProperty("name", out var author) ? author.GetString() : string.Empty,
                                Price = courseJson.TryGetProperty("prices", out var pricesJson) ? $"{pricesJson.GetProperty("currency").GetString()} {pricesJson.GetProperty("price").GetDouble()}" : string.Empty,
                                DiscountPrice = courseJson.TryGetProperty("prices", out var discountJson) && discountJson.GetProperty("discount").GetDouble() > 0
                                    ? $"{discountJson.GetProperty("currency").GetString()} {discountJson.GetProperty("price").GetDouble() - discountJson.GetProperty("discount").GetDouble()}"
                                    : null,
                                Hours = courseJson.TryGetProperty("hours", out var hours) ? hours.GetString() : string.Empty,
                                LikesInProcent = courseJson.TryGetProperty("likesInProcent", out var likesInProcent) ? likesInProcent.GetString() : string.Empty,
                                LikesInNumbers = courseJson.TryGetProperty("likes", out var likes) ? likes.GetString() : string.Empty
                            };
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error parsing JSON response: {ex.Message}");
                }
            }
        }
    }

    private bool OrderPlaced { get; set; } = false;

    private async Task OrderCourse()
    {
        Console.WriteLine(CourseId);
        Console.WriteLine(OrderPlaced);

        if (CourseId != null)
        {
            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;

            Console.WriteLine(user);

            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null)
            {
                var currentUserId = userIdClaim.Value;

                Console.WriteLine(currentUserId);
                var order = new OrderEntity
                    {
                        CourseId = CourseId,
                        UserId = currentUserId
                    };

                Console.WriteLine($"Order CourseId: {order.CourseId}");
                Console.WriteLine($"Order UserId: {order.UserId}");

                try
                {
                    await OrderService.CreateOrderAsync(order);
                    OrderPlaced = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error placing the order: {ex.Message}");
                }

                StateHasChanged();
            }
            else
            {
                Console.WriteLine("User ID claim not found.");
            }
        }
    }
}
